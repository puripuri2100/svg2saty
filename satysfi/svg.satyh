@require: gr
@require: color
@require: list
@require: option
@require: base/float

type svg-position =
  | Absolute % 絶対座標
  | Relative % 相対座標

let is-Absolute pos =
  match pos with
  | Absolute -> true  % 絶対座標
  | Relative -> false % 相対座標


type svg-float-point = float * float

type svg-command =
  | Move                 of svg-position * svg-float-point list
  | Line                 of svg-position * svg-float-point list
  | HorizontalLine       of svg-position * float list
  | VerticalLine         of svg-position * float list
  | QuadraticCurve       of svg-position * (svg-float-point * svg-float-point) list
  | SmoothQuadraticCurve of svg-position * svg-float-point list
  | CubicCurve           of svg-position * (svg-float-point * svg-float-point * svg-float-point) list
  | SmoothCubicCurve     of svg-position * (svg-float-point * svg-float-point) list
%  | EllipticalArc        of svg-position * svg-parameters % 楕円曲線命令 難しいので放置
  | Close

type svg-tag =
  | Path of
    color option * % fill
    svg-command list % 
  | Circle of
    color option * % fill
    float option * % cx
    float option * % cy
    float option   % r

module SVG2saty : sig
  val make-graphics : length -> float -> svg-tag list -> graphics list
end = struct


type path-type =
  | PathBezier of point * point * point
  | PathLine of point
  | PathStart of point
  | PathClose


let-mutable now-point-ref <- (0pt, 0pt)
let-mutable start-point-ref <- (0pt,0pt)
let-mutable now-curve-point-ref <- None


let make-point base-len pos (x,y) =
  let (now-x, now-y) = !now-point-ref in
  if is-Absolute pos then
    % 絶対座標
    let pt = (base-len *' x, base-len *' y) in
    let () = now-point-ref <- pt in
    pt
  else
    % 相対座標
    let pt = (now-x +' (base-len *' x), now-y +' (base-len *' y)) in
    let () = now-point-ref <- pt in
    pt


% lineto命令 パラメタは(x y)+
let draw-Line base-len pos para =
  let point-lst = List.map (make-point base-len pos) para in
  let () = now-curve-point-ref <- None in
  List.map (fun t -> PathLine(t)) point-lst


% 水平方向のlineto命令 パラメタはx+
let draw-HorizontalLine base-len pos para =
  let f x =
    let (now-x, now-y) = !now-point-ref in
    if is-Absolute pos then
      % 絶対座標
      let pt = (base-len *' x, now-y) in
      let () = now-point-ref <- pt in
      pt
    else
      % 相対座標
      let pt = (now-x +' (base-len *' x), now-y) in
      let () = now-point-ref <- pt in
      pt
  in
  let () = now-curve-point-ref <- None in
  List.map (fun t -> PathLine(f t)) para


% 垂直方向のlineto命令 パラメタはy+
let draw-VerticalLine base-len pos para =
  let f y =
    let (now-x, now-y) = !now-point-ref in
  if is-Absolute pos then
    % 絶対座標
    let pt = (now-x, base-len *' y) in
    let () = now-point-ref <- pt in
    pt
  else
    % 相対座標
    let pt = (now-x, now-y +' (base-len *' y)) in
    let () = now-point-ref <- pt in
    pt
  in
  let () = now-curve-point-ref <- None in
  List.map (fun t -> PathLine(f t)) para


% 2次ベジェ曲線命令 パラメタは(x1 y1 x y)+
let draw-QuadraticCurve base-len pos para =
  let path-type-lst = List.map
    (fun (xy1, xy) -> (
      let (now-x, now-y) = !now-point-ref in
      let f (x,y) =
        if is-Absolute pos then
          % 絶対座標
          let pt = (base-len *' x, base-len *' y) in
          pt
        else
          % 相対座標
          let pt = (now-x +' (base-len *' x), now-y +' (base-len *' y)) in
          pt
      in
      let new-xy1 = f xy1 in
      let new-xy = make-point base-len pos xy in
      let () = now-curve-point-ref <- Some(new-xy1) in
      PathBezier(new-xy1, new-xy1, new-xy)
    ))
    para
  in
  path-type-lst


% 略式2次ベジェ曲線命令 パラメタは(x y)+
let draw-SmoothQuadraticCurve base-len pos para =
  let path-type-lst = List.map
    (fun (xy) -> (
      let (now-x, now-y) = !now-point-ref in
      let new-xy1 =
        match !now-curve-point-ref with
        | Some(now-curve-x,now-curve-y) -> (
          let x = now-x +' (now-x -' now-curve-x) in
          let y = now-y +' (now-y -' now-curve-y) in
          (x,y)
        )
        | None -> (now-x, now-y)
      in
      let new-xy = make-point base-len pos xy in
      let () = now-curve-point-ref <- Some(new-xy1) in
      PathBezier(new-xy1, new-xy1, new-xy)
    ))
    para
  in
  path-type-lst


% 3次ベジェ曲線命令 パラメタは(x1 y1 x2 y2 x y)+
let draw-CubicCurve base-len pos para =
  let path-type-lst = List.map
    (fun (xy1, xy2, xy) -> (
      let (now-x, now-y) = !now-point-ref in
      let f (x,y) =
        if is-Absolute pos then
          % 絶対座標
          let pt = (base-len *' x, base-len *' y) in
          pt
        else
          % 相対座標
          let pt = (now-x +' (base-len *' x), now-y +' (base-len *' y)) in
          pt
      in
      let new-xy1 = f xy1 in
      let new-xy2 = f xy2 in
      let new-xy = f xy in
      let () = now-point-ref <- new-xy in
      let () = now-curve-point-ref <- Some(new-xy2) in
      PathBezier(new-xy1, new-xy2, new-xy)
    ))
    para
  in
  path-type-lst


% 略式3次ベジェ曲線命令 パラメタは(x2 y2 x y)+
let draw-SmoothCubicCurve base-len pos para =
  let path-type-lst = List.map
    (fun (xy2, xy) -> (
      let (now-x, now-y) = !now-point-ref in
      let new-xy1 =
        match !now-curve-point-ref with
        | Some(now-curve-x,now-curve-y) -> (
          let x = now-x +' (now-x -' now-curve-x) in
          let y = now-y +' (now-y -' now-curve-y) in
          (x,y)
        )
        | None -> (now-x, now-y)
      in
      let f (x,y) =
        if is-Absolute pos then
          % 絶対座標
          let pt = (base-len *' x, base-len *' y) in
          pt
        else
          % 相対座標
          let pt = (now-x +' (base-len *' x), now-y +' (base-len *' y)) in
          pt
      in
      let new-xy2 = f xy2 in
      let new-xy = f xy in
      let () = now-point-ref <- new-xy in
      let () = now-curve-point-ref <- Some(new-xy2) in
      PathBezier(new-xy1, new-xy2, new-xy)
    ))
    para
  in
  path-type-lst


  let make-path-lst base-len fill-opt command-list =
    let make-path-type-lst com =
      match com with
      | Move                 (pos,para) -> (
        let _ = List.map (make-point base-len pos) para in
        let () = start-point-ref <- !now-point-ref in
        let () = now-curve-point-ref <- None in
        [PathStart(!now-point-ref)]
      )
      | Line                 (pos,para) -> draw-Line                 base-len pos para
      | HorizontalLine       (pos,para) -> draw-HorizontalLine       base-len pos para
      | VerticalLine         (pos,para) -> draw-VerticalLine         base-len pos para
      | QuadraticCurve       (pos,para) -> draw-QuadraticCurve       base-len pos para
      | SmoothQuadraticCurve (pos,para) -> draw-SmoothQuadraticCurve base-len pos para
      | CubicCurve           (pos,para) -> draw-CubicCurve           base-len pos para
      | SmoothCubicCurve     (pos,para) -> draw-SmoothCubicCurve     base-len pos para
%      | EllipticalArc        (pos,para) -> []
      | Close                           -> [PathClose]
    in
    let path-type-lst =
      command-list
      |> List.map make-path-type-lst
      |> List.concat
    in
    let-rec make-path path-type-lst path pre-path =
      match path-type-lst with
      | [] -> path
      | (PathBezier(xy1,xy2,xy))::[] -> (
        unite-path (bezier-to xy1 xy2 xy pre-path |> close-with-line) path
      )
      | (PathLine(xy))::[] -> (
        unite-path (line-to xy pre-path |> close-with-line)  path
      )
      | (PathBezier(xy1,xy2,xy))::(PathClose)::(PathStart(new-xy))::xs -> (
        let new-path = unite-path (bezier-to xy1 xy2 xy pre-path |> close-with-line) path in
        let () = now-curve-point-ref <- None in
        make-path xs new-path (start-path new-xy)
      )
      | (PathClose)::(PathStart(new-xy))::xs -> (
        let new-path = unite-path (close-with-line pre-path) path in
        let () = start-point-ref <- new-xy in
        let () = now-curve-point-ref <- None in
        make-path xs new-path (start-path new-xy)
      )
      | (PathClose)::x::xs -> (
        let new-path = unite-path (close-with-line pre-path) path in
        let () = now-curve-point-ref <- None in
        let () = now-point-ref <- !start-point-ref in
        make-path (x::xs) new-path (start-path !now-point-ref)
      )
      | (PathClose)::[] -> unite-path (close-with-line pre-path) path
      | (PathBezier(xy1,xy2,xy)) :: xs -> make-path xs path (bezier-to xy1 xy2 xy pre-path)
      | (PathLine(xy)) :: xs -> (
        let () = now-curve-point-ref <- None in
        make-path xs path (line-to xy pre-path)
      )
      | _ -> path
    in
    let dummy-path = (0pt,0pt) |> start-path |> close-with-line in
    let path-lst =
      match path-type-lst with
      | [] -> []
      | (PathStart(xy))::xs -> (
        let () = now-curve-point-ref <- None in
        [make-path xs dummy-path (start-path xy)]
      )
      | _ -> []
    in
    match fill-opt with
    | Some(c) -> List.map (fill c) path-lst
    | None    -> List.map (fill Color.white) path-lst




  let make-circle-lst base-len fill-opt cx-opt cy-opt r-opt =
    let path-opt =
      match (cx-opt, cy-opt, r-opt) with
      | (Some(cx), Some(cy), Some(r)) -> Some(Gr.circle (base-len *' cx, base-len *' cy) (base-len *' r))
      | _ -> None
    in
    match (path-opt,fill-opt) with
    | (Some(p),Some(c)) -> [fill c p]
    | (Some(p),None)    -> [fill Color.white p]
    | _ -> []



  let make-graphics base-len y-len lst =
    let gr-lst t =
     match t with
      | Path (fill-opt, command-list) -> make-path-lst base-len fill-opt command-list
      | Circle (fill-opt, cx-opt, cy-opt, r-opt) -> make-circle-lst base-len fill-opt cx-opt cy-opt r-opt
    in
    lst
    |> List.map gr-lst
    |> List.concat
    |> List.map (shift-graphics (0pt,base-len *' y-len))

end

